<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#Base" name="8"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadBoard" val="NEXYS4_DDR_NOU"/>
    <a name="downloadFrequency" val="128.0"/>
    <a name="simulationFrequency" val="256.0"/>
    <comp lib="0" loc="(1470,510)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(1470,530)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(1470,550)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(1550,470)" name="Clock"/>
    <comp lib="0" loc="(1560,490)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(1890,570)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(2800,470)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(2810,490)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(2890,660)" name="Splitter">
      <a name="fanout" val="7"/>
      <a name="incoming" val="7"/>
    </comp>
    <comp lib="0" loc="(2890,960)" name="Splitter">
      <a name="fanout" val="7"/>
      <a name="incoming" val="7"/>
    </comp>
    <comp lib="0" loc="(2900,1130)" name="Splitter">
      <a name="fanout" val="7"/>
      <a name="incoming" val="7"/>
    </comp>
    <comp lib="0" loc="(2900,830)" name="Splitter">
      <a name="fanout" val="7"/>
      <a name="incoming" val="7"/>
    </comp>
    <comp lib="1" loc="(2500,500)" name="OR Gate"/>
    <comp lib="5" loc="(2980,590)" name="7-Segment Display">
      <a name="labelvisible" val="true"/>
    </comp>
    <comp lib="5" loc="(2980,890)" name="7-Segment Display">
      <a name="labelvisible" val="true"/>
    </comp>
    <comp lib="5" loc="(2990,1060)" name="7-Segment Display">
      <a name="labelvisible" val="true"/>
    </comp>
    <comp lib="5" loc="(2990,760)" name="7-Segment Display">
      <a name="labelvisible" val="true"/>
    </comp>
    <comp loc="(1810,470)" name="uc">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(2090,960)" name="verif_alarma">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(2250,450)" name="numsec">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(2540,720)" name="transf">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(2540,970)" name="transfmin">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(2790,450)" name="nummin">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(2890,660)" name="afisor">
      <a name="appearance" val="logisim_evolution"/>
      <a name="labelvisible" val="true"/>
    </comp>
    <comp loc="(2890,960)" name="afisor">
      <a name="appearance" val="logisim_evolution"/>
      <a name="labelvisible" val="true"/>
    </comp>
    <comp loc="(2900,1130)" name="afisor">
      <a name="appearance" val="logisim_evolution"/>
      <a name="labelvisible" val="true"/>
    </comp>
    <comp loc="(2900,830)" name="afisor">
      <a name="appearance" val="logisim_evolution"/>
      <a name="labelvisible" val="true"/>
    </comp>
    <wire from="(1470,510)" to="(1590,510)"/>
    <wire from="(1470,530)" to="(1590,530)"/>
    <wire from="(1470,550)" to="(1590,550)"/>
    <wire from="(1550,470)" to="(1570,470)"/>
    <wire from="(1560,490)" to="(1580,490)"/>
    <wire from="(1560,570)" to="(1560,900)"/>
    <wire from="(1560,570)" to="(1590,570)"/>
    <wire from="(1560,900)" to="(2100,900)"/>
    <wire from="(1570,450)" to="(1570,470)"/>
    <wire from="(1570,450)" to="(1960,450)"/>
    <wire from="(1570,470)" to="(1590,470)"/>
    <wire from="(1580,490)" to="(1580,710)"/>
    <wire from="(1580,490)" to="(1590,490)"/>
    <wire from="(1580,710)" to="(1990,710)"/>
    <wire from="(1590,510)" to="(1600,510)"/>
    <wire from="(1800,1070)" to="(2270,1070)"/>
    <wire from="(1800,980)" to="(1800,1070)"/>
    <wire from="(1800,980)" to="(1870,980)"/>
    <wire from="(1810,470)" to="(1870,470)"/>
    <wire from="(1810,490)" to="(1830,490)"/>
    <wire from="(1810,510)" to="(1820,510)"/>
    <wire from="(1810,530)" to="(1820,530)"/>
    <wire from="(1810,550)" to="(1810,570)"/>
    <wire from="(1810,570)" to="(1890,570)"/>
    <wire from="(1820,510)" to="(1820,520)"/>
    <wire from="(1820,520)" to="(1830,520)"/>
    <wire from="(1820,530)" to="(1820,540)"/>
    <wire from="(1820,540)" to="(1830,540)"/>
    <wire from="(1820,870)" to="(1820,960)"/>
    <wire from="(1820,870)" to="(2280,870)"/>
    <wire from="(1820,960)" to="(1870,960)"/>
    <wire from="(1830,490)" to="(1830,510)"/>
    <wire from="(1830,510)" to="(2020,510)"/>
    <wire from="(1830,520)" to="(1830,530)"/>
    <wire from="(1830,530)" to="(1980,530)"/>
    <wire from="(1830,540)" to="(1830,550)"/>
    <wire from="(1830,550)" to="(1950,550)"/>
    <wire from="(1870,470)" to="(1870,490)"/>
    <wire from="(1870,490)" to="(2030,490)"/>
    <wire from="(1950,550)" to="(1950,720)"/>
    <wire from="(1950,720)" to="(2320,720)"/>
    <wire from="(1960,410)" to="(1960,450)"/>
    <wire from="(1960,410)" to="(2570,410)"/>
    <wire from="(1960,450)" to="(2030,450)"/>
    <wire from="(1980,530)" to="(1980,840)"/>
    <wire from="(1980,840)" to="(2310,840)"/>
    <wire from="(1990,470)" to="(1990,710)"/>
    <wire from="(1990,470)" to="(2000,470)"/>
    <wire from="(2000,470)" to="(2000,570)"/>
    <wire from="(2000,470)" to="(2030,470)"/>
    <wire from="(2000,570)" to="(2510,570)"/>
    <wire from="(2020,510)" to="(2020,620)"/>
    <wire from="(2020,510)" to="(2030,510)"/>
    <wire from="(2020,620)" to="(2530,620)"/>
    <wire from="(2030,450)" to="(2040,450)"/>
    <wire from="(2090,960)" to="(2100,960)"/>
    <wire from="(2100,900)" to="(2100,960)"/>
    <wire from="(2250,450)" to="(2280,450)"/>
    <wire from="(2250,470)" to="(2450,470)"/>
    <wire from="(2250,490)" to="(2450,490)"/>
    <wire from="(2250,590)" to="(2250,990)"/>
    <wire from="(2250,590)" to="(2860,590)"/>
    <wire from="(2250,990)" to="(2270,990)"/>
    <wire from="(2270,990)" to="(2270,1070)"/>
    <wire from="(2270,990)" to="(2320,990)"/>
    <wire from="(2280,450)" to="(2280,870)"/>
    <wire from="(2280,450)" to="(2300,450)"/>
    <wire from="(2300,450)" to="(2300,740)"/>
    <wire from="(2300,740)" to="(2320,740)"/>
    <wire from="(2310,840)" to="(2310,970)"/>
    <wire from="(2310,970)" to="(2320,970)"/>
    <wire from="(2450,470)" to="(2450,480)"/>
    <wire from="(2450,490)" to="(2450,520)"/>
    <wire from="(2500,500)" to="(2570,500)"/>
    <wire from="(2510,470)" to="(2510,570)"/>
    <wire from="(2510,470)" to="(2570,470)"/>
    <wire from="(2530,510)" to="(2530,620)"/>
    <wire from="(2530,510)" to="(2570,510)"/>
    <wire from="(2540,720)" to="(2670,720)"/>
    <wire from="(2540,740)" to="(2680,740)"/>
    <wire from="(2540,970)" to="(2670,970)"/>
    <wire from="(2540,990)" to="(2680,990)"/>
    <wire from="(2570,410)" to="(2570,450)"/>
    <wire from="(2570,490)" to="(2570,500)"/>
    <wire from="(2570,510)" to="(2580,510)"/>
    <wire from="(2670,660)" to="(2670,720)"/>
    <wire from="(2670,960)" to="(2670,970)"/>
    <wire from="(2680,740)" to="(2680,830)"/>
    <wire from="(2680,990)" to="(2680,1130)"/>
    <wire from="(2790,450)" to="(2860,450)"/>
    <wire from="(2790,470)" to="(2800,470)"/>
    <wire from="(2790,490)" to="(2810,490)"/>
    <wire from="(2800,470)" to="(2810,470)"/>
    <wire from="(2810,490)" to="(2820,490)"/>
    <wire from="(2860,450)" to="(2860,590)"/>
    <wire from="(2910,590)" to="(2980,590)"/>
    <wire from="(2910,600)" to="(2970,600)"/>
    <wire from="(2910,610)" to="(2960,610)"/>
    <wire from="(2910,620)" to="(2970,620)"/>
    <wire from="(2910,630)" to="(2950,630)"/>
    <wire from="(2910,640)" to="(2940,640)"/>
    <wire from="(2910,650)" to="(2910,680)"/>
    <wire from="(2910,680)" to="(3040,680)"/>
    <wire from="(2910,890)" to="(2980,890)"/>
    <wire from="(2910,900)" to="(2970,900)"/>
    <wire from="(2910,910)" to="(2960,910)"/>
    <wire from="(2910,920)" to="(2970,920)"/>
    <wire from="(2910,930)" to="(2950,930)"/>
    <wire from="(2910,940)" to="(2940,940)"/>
    <wire from="(2910,950)" to="(2910,980)"/>
    <wire from="(2910,980)" to="(3040,980)"/>
    <wire from="(2920,1060)" to="(2990,1060)"/>
    <wire from="(2920,1070)" to="(2980,1070)"/>
    <wire from="(2920,1080)" to="(2970,1080)"/>
    <wire from="(2920,1090)" to="(2980,1090)"/>
    <wire from="(2920,1100)" to="(2960,1100)"/>
    <wire from="(2920,1110)" to="(2950,1110)"/>
    <wire from="(2920,1120)" to="(2920,1150)"/>
    <wire from="(2920,1150)" to="(3050,1150)"/>
    <wire from="(2920,760)" to="(2990,760)"/>
    <wire from="(2920,770)" to="(2980,770)"/>
    <wire from="(2920,780)" to="(2970,780)"/>
    <wire from="(2920,790)" to="(2980,790)"/>
    <wire from="(2920,800)" to="(2960,800)"/>
    <wire from="(2920,810)" to="(2950,810)"/>
    <wire from="(2920,820)" to="(2920,850)"/>
    <wire from="(2920,850)" to="(3050,850)"/>
    <wire from="(2940,640)" to="(2940,670)"/>
    <wire from="(2940,670)" to="(3030,670)"/>
    <wire from="(2940,940)" to="(2940,970)"/>
    <wire from="(2940,970)" to="(3030,970)"/>
    <wire from="(2950,1110)" to="(2950,1140)"/>
    <wire from="(2950,1140)" to="(3040,1140)"/>
    <wire from="(2950,630)" to="(2950,660)"/>
    <wire from="(2950,660)" to="(3000,660)"/>
    <wire from="(2950,810)" to="(2950,840)"/>
    <wire from="(2950,840)" to="(3040,840)"/>
    <wire from="(2950,930)" to="(2950,960)"/>
    <wire from="(2950,960)" to="(3000,960)"/>
    <wire from="(2960,1100)" to="(2960,1130)"/>
    <wire from="(2960,1130)" to="(3010,1130)"/>
    <wire from="(2960,610)" to="(2960,650)"/>
    <wire from="(2960,650)" to="(2980,650)"/>
    <wire from="(2960,800)" to="(2960,830)"/>
    <wire from="(2960,830)" to="(3010,830)"/>
    <wire from="(2960,910)" to="(2960,950)"/>
    <wire from="(2960,950)" to="(2980,950)"/>
    <wire from="(2970,1000)" to="(2990,1000)"/>
    <wire from="(2970,1080)" to="(2970,1120)"/>
    <wire from="(2970,1120)" to="(2990,1120)"/>
    <wire from="(2970,580)" to="(2970,600)"/>
    <wire from="(2970,580)" to="(2990,580)"/>
    <wire from="(2970,620)" to="(2970,700)"/>
    <wire from="(2970,700)" to="(2990,700)"/>
    <wire from="(2970,780)" to="(2970,820)"/>
    <wire from="(2970,820)" to="(2990,820)"/>
    <wire from="(2970,880)" to="(2970,900)"/>
    <wire from="(2970,880)" to="(2990,880)"/>
    <wire from="(2970,920)" to="(2970,1000)"/>
    <wire from="(2980,1050)" to="(2980,1070)"/>
    <wire from="(2980,1050)" to="(3000,1050)"/>
    <wire from="(2980,1090)" to="(2980,1170)"/>
    <wire from="(2980,1170)" to="(3000,1170)"/>
    <wire from="(2980,750)" to="(2980,770)"/>
    <wire from="(2980,750)" to="(3000,750)"/>
    <wire from="(2980,790)" to="(2980,870)"/>
    <wire from="(2980,870)" to="(3000,870)"/>
    <wire from="(2990,580)" to="(2990,590)"/>
    <wire from="(2990,650)" to="(2990,700)"/>
    <wire from="(2990,880)" to="(2990,890)"/>
    <wire from="(2990,950)" to="(2990,1000)"/>
    <wire from="(3000,1050)" to="(3000,1060)"/>
    <wire from="(3000,1120)" to="(3000,1170)"/>
    <wire from="(3000,580)" to="(3000,590)"/>
    <wire from="(3000,580)" to="(3040,580)"/>
    <wire from="(3000,650)" to="(3000,660)"/>
    <wire from="(3000,750)" to="(3000,760)"/>
    <wire from="(3000,820)" to="(3000,870)"/>
    <wire from="(3000,880)" to="(3000,890)"/>
    <wire from="(3000,880)" to="(3040,880)"/>
    <wire from="(3000,950)" to="(3000,960)"/>
    <wire from="(3010,1050)" to="(3010,1060)"/>
    <wire from="(3010,1050)" to="(3050,1050)"/>
    <wire from="(3010,1120)" to="(3010,1130)"/>
    <wire from="(3010,590)" to="(3030,590)"/>
    <wire from="(3010,750)" to="(3010,760)"/>
    <wire from="(3010,750)" to="(3050,750)"/>
    <wire from="(3010,820)" to="(3010,830)"/>
    <wire from="(3010,890)" to="(3030,890)"/>
    <wire from="(3020,1060)" to="(3040,1060)"/>
    <wire from="(3020,760)" to="(3040,760)"/>
    <wire from="(3030,590)" to="(3030,670)"/>
    <wire from="(3030,890)" to="(3030,970)"/>
    <wire from="(3040,1060)" to="(3040,1140)"/>
    <wire from="(3040,580)" to="(3040,680)"/>
    <wire from="(3040,760)" to="(3040,840)"/>
    <wire from="(3040,880)" to="(3040,980)"/>
    <wire from="(3050,1050)" to="(3050,1150)"/>
    <wire from="(3050,750)" to="(3050,850)"/>
  </circuit>
  <vhdl name="numsec">library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_arith.all;
entity numsec is
    port ( 
        clk_1, rst : in std_logic;
        clk_enable : in std_logic;
        count_mode : in std_logic;
        sec: out  std_logic_vector (5 downto 0);
        borrow_s, carry_s : inout std_logic
    );
end numsec;

architecture Behavioral of numsec is

    signal count : integer range -2 to 60 := 0;
   
 
begin
    process (clk_1, rst,count_mode)
    variable count : integer range 0 to 60 := 0;
    begin
        if rst = '1' then
            count := 0;
            sec &lt;= (others =&gt; '0');
            borrow_s &lt;= '0';
            carry_s &lt;= '0';
          end if;  
          if clk_enable = '1' then 
          if (count_mode = '1' and rising_edge(clk_1)) then -- Count up
                    count := count + 1;                    
                    if count = 59 then
                    
                    	carry_s &lt;= '1';
               	else
               		carry_s &lt;= '0';
               	end if;
               	
               	if count = 60 then
               		count := 0;
          		end if;
                    sec &lt;= std_logic_vector(to_unsigned(count, 6));

                 
            elsif (count_mode='0' and rising_edge(clk_1)) then
            if(borrow_s='1') then
            count:=59;
            else count:=count-1;
            end if;
                     -- Count down
                  if count=0 then
            borrow_s&lt;='1';
            else
            borrow_s&lt;='0';
            end if;
            sec&lt;= std_logic_vector(to_unsigned(count, 6));
                   end if;
                   end if;
    end process;
   
    
end architecture;</vhdl>
  <vhdl name="transf">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.numeric_std.all;

entity transf is
    port (
    enable:in std_logic;
        sec: in std_logic_vector(5 downto 0);
        sec_ZECI: out std_logic_vector(3 downto 0);
        sec_Unitati: out std_logic_vector(3 downto 0)
    );
end transf;

architecture behavioral of transf is
    signal sec_nat: integer;
begin
    sec_nat &lt;= to_integer(unsigned(sec));

    
    process(sec_nat)
    begin
    if enable='0' then
    		sec_ZECI&lt;=x"0";
    		sec_Unitati&lt;=x"0";
        elsif (sec_nat &lt;= 9) then
            sec_ZECI &lt;= "0000";
            sec_Unitati &lt;= std_logic_vector(to_unsigned(sec_nat, 4));
        elsif (sec_nat &gt;= 10 and sec_nat &lt;= 19) then
            sec_ZECI &lt;= "0001";
            sec_Unitati &lt;= std_logic_vector(to_unsigned(sec_nat - 10, 4));
        elsif (sec_nat &gt;= 20 and sec_nat &lt;= 29) then
            sec_ZECI &lt;= "0010";
            sec_Unitati &lt;= std_logic_vector(to_unsigned(sec_nat - 20, 4));
        elsif (sec_nat &gt;= 30 and sec_nat &lt;= 39) then
            sec_ZECI &lt;= "0011";
            sec_Unitati &lt;= std_logic_vector(to_unsigned(sec_nat - 30, 4));
        elsif (sec_nat &gt;= 40 and sec_nat &lt;= 49) then
            sec_ZECI &lt;= "0100";
            sec_Unitati &lt;= std_logic_vector(to_unsigned(sec_nat - 40, 4));
        elsif (sec_nat &gt;= 50 and sec_nat &lt;= 59) then
            sec_ZECI &lt;= "0101";
            sec_Unitati &lt;= std_logic_vector(to_unsigned(sec_nat - 50, 4));
        end if;
    end process;
end behavioral;</vhdl>
  <vhdl name="nummin">library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity nummin is
    port ( 
        clk_1, rst : in std_logic;
        clk_enable : in std_logic;
        count_mode : in std_logic;
        min: out  std_logic_vector (6 downto 0);
        borrow_m, carry_m : inout std_logic
    );
end nummin;


architecture Behavioral of nummin is
begin
    process (clk_1, rst, count_mode)
        variable count : integer range -1 to 100 := 0;
    begin
        if rst = '1' then
            count := 0;
            min &lt;= (others =&gt; '0');
            borrow_m &lt;= '0';
            carry_m &lt;= '0';
            end if;
        if clk_enable = '1' then
            if (count_mode = '1' and rising_edge(clk_1)) then
                   count := count + 1;                    
                    if count = 99 then
                    
                    	carry_m &lt;= '1';
               	else
               		carry_m &lt;= '0';
               	end if;
               	
               	if count = 100 then
               		count := 0;
          		end if;
                    min &lt;= std_logic_vector(to_unsigned(count, 7));

            elsif (count_mode = '0' and rising_edge(clk_1)) then
                   if(borrow_m='1') then
            count:=99;
            else count:=count-1;
            end if;
                     -- Count down
                  if count=0 then
            borrow_m&lt;='1';
            else
            borrow_m&lt;='0';
            end if;
                    min &lt;= std_logic_vector(to_unsigned(count, 7));
                end if;
            end if;
       
    end process;
end architecture;</vhdl>
  <vhdl name="transfmin">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.numeric_std.all;

entity transfmin is
    port (
    enable:in std_logic;
        min: in std_logic_vector(6 downto 0);
        min_ZECI: out std_logic_vector(3 downto 0);
        min_Unitati: out std_logic_vector(3 downto 0)
    );
end transfmin;

architecture behavioral of transfmin is
    signal min_nat: integer;
begin
    min_nat &lt;= to_integer(unsigned(min));
    
    process(min_nat)
    begin
    if enable='0' then
    min_ZECI&lt;=x"0";
    min_Unitati&lt;=x"0";
        elsif (min_nat &lt;= 9) then
            min_ZECI &lt;= "0000";
            min_Unitati &lt;= std_logic_vector(to_unsigned(min_nat, 4));
        elsif (min_nat &gt;= 10 and min_nat &lt;= 19) then
            min_ZECI &lt;= "0001";
            min_Unitati &lt;= std_logic_vector(to_unsigned(min_nat - 10, 4));
        elsif (min_nat &gt;= 20 and min_nat &lt;= 29) then
            min_ZECI &lt;= "0010";
            min_Unitati &lt;= std_logic_vector(to_unsigned(min_nat - 20, 4));
        elsif (min_nat &gt;= 30 and min_nat &lt;= 39) then
            min_ZECI &lt;= "0011";
            min_Unitati &lt;= std_logic_vector(to_unsigned(min_nat - 30, 4));
        elsif (min_nat &gt;= 40 and min_nat &lt;= 49) then
            min_ZECI &lt;= "0100";
            min_Unitati &lt;= std_logic_vector(to_unsigned(min_nat - 40, 4));
        elsif (min_nat &gt;= 50 and min_nat &lt;= 59) then
            min_ZECI &lt;= "0101";
            min_Unitati &lt;= std_logic_vector(to_unsigned(min_nat - 50, 4));
        elsif (min_nat &gt;= 60 and min_nat &lt;= 69) then
            min_ZECI &lt;= "0110";
            min_Unitati &lt;= std_logic_vector(to_unsigned(min_nat - 60, 4));
        elsif (min_nat &gt;= 70 and min_nat &lt;= 79) then
            min_ZECI &lt;= "0111";
            min_Unitati &lt;= std_logic_vector(to_unsigned(min_nat - 70, 4));
        elsif (min_nat &gt;= 80 and min_nat &lt;= 89) then
            min_ZECI &lt;= "1000";
            min_Unitati &lt;= std_logic_vector(to_unsigned(min_nat - 80, 4));
        elsif (min_nat &gt;= 90 and min_nat &lt;= 99) then
            min_ZECI &lt;= "1001";
            min_Unitati &lt;= std_logic_vector(to_unsigned(min_nat - 90, 4));
        end if;
    end process;
end architecture;</vhdl>
  <vhdl name="afisor">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.std_logic_unsigned.all;

entity afisor is
    Port ( inputs: in std_logic_vector(3 downto 0);
		LED_out : out std_logic_vector(6 downto 0));    -- Cathode patterns of 7-segment display
end afisor;

architecture Behavioral of afisor is

signal LED_BCD: STD_LOGIC_VECTOR (3 downto 0);


begin
LED_bcd&lt;=inputs;
-- VHDL code for BCD to 7-segment decoder
-- Cathode patterns of the 7-segment LED display 
process(LED_BCD)
begin
    case LED_BCD is
    when "0000" =&gt; LED_out &lt;= "1111110"; -- "0"     
    when "0001" =&gt; LED_out &lt;= "0110000"; -- "1" 
    when "0010" =&gt; LED_out &lt;= "1101101"; -- "2" 
    when "0011" =&gt; LED_out &lt;= "1111001"; -- "3" 
    when "0100" =&gt; LED_out &lt;= "0110011"; -- "4" 
    when "0101" =&gt; LED_out &lt;= "1011011"; -- "5" 
    when "0110" =&gt; LED_out &lt;= "1011111"; -- "6" 
    when "0111" =&gt; LED_out &lt;= "1110000"; -- "7" 
    when "1000" =&gt; LED_out &lt;= "1111111"; -- "8"     
    when "1001" =&gt; LED_out &lt;= "1111011"; -- "9" 
	when others =&gt; LED_out &lt;= "0000000";
    end case;
end process;

end Behavioral;</vhdl>
  <vhdl name="uc">
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY uc IS&#13;

  port (
        clk_1: in std_logic;
        rst: in std_logic;
        start_stop: in std_logic;
        m_button: in std_logic;
        s_button: in std_logic;
        --carry,borrow: in std_logic;
        count_enable,count_mode,ssd_min,ssd_sec: inout std_logic;
        alarma_activate: in std_logic;
        led_alarm:out std_logic
    );&#13;
END uc;&#13;
&#13;
&#13;
ARCHITECTURE TypeArchitecture OF uc IS&#13;
&#13;type state_type is (Zero, Crescator,afisare_sec,afisare_min,afisare_min_sec,Descrescator,Alarma);
signal current_state, next_state:state_type:=Zero;

signal alarm_T5: std_logic:='0';

BEGIN&#13;

 process(rst,clk_1)
begin
 if (rst='1') then 
       current_state&lt;=Zero;
 elsif (rising_edge(clk_1)) then 
 current_state&lt;=next_state;
 end if;
 end process;



 
 process(start_stop,m_button,s_button,alarma_activate,alarm_T5)
 begin
 case current_state is
 when Zero =&gt; if start_stop='1' then
               next_state&lt;=Crescator;
               else 
               next_state&lt;=Zero;
               end if;
 when Crescator =&gt;if m_button='1' and s_button='1' then 
 				next_state&lt;=afisare_min_sec;
 				elsif m_button='1' then
                   next_state&lt;=afisare_min;
                   elsif s_button='1' then
                   next_state&lt;=afisare_sec;
                   else
                   next_state&lt;=Crescator;
                   end if;
when afisare_min=&gt; if s_button='1' then
 				next_state&lt;=afisare_min_sec;
 				else
 				next_state&lt;=afisare_min;
 				end if;
 				if alarma_activate='1' then
                   next_state&lt;=Alarma;
                   end if;
when afisare_sec=&gt; if m_button='1' then
				next_state&lt;=afisare_min_sec;
				else 
				next_state&lt;=afisare_sec;
				end if;
				if alarma_activate='1' then
                   next_state&lt;=Alarma;
                   end if;
when afisare_min_sec=&gt; if start_stop='1' then
					next_state&lt;=Descrescator;
					else
					next_state&lt;=afisare_min_sec;
					end if;
					if alarma_activate='1' then
                   next_state&lt;=Alarma;
                   end if;
when Descrescator=&gt;if m_button='1' and s_button='1' then 
 				next_state&lt;=afisare_min_sec;
				elsif m_button='1' then
                   next_state&lt;=afisare_min;
                   elsif s_button='1' then
                   next_state&lt;=afisare_sec;
                   else
                   next_state&lt;=Descrescator;
                   end if;
                   if alarma_activate='1' then
                   next_state&lt;=Alarma;
                   end if;
 when Alarma=&gt; if alarm_T5='1' then
 next_state&lt;=Zero;
 else next_state&lt;=Alarma;
 end if;
when others=&gt; next_state&lt;=Zero;
end case;
 end process;

process(current_state,clk_1)
variable count:integer:=0;
begin
if current_state=Alarma then
if clk_1='1' and clk_1'event then
if count=5 then
alarm_T5&lt;='1';
count:=0;
else count:=count+1;
end if;
elsif current_state=Zero then
alarm_T5&lt;='0';
end if;
end if;
end process;
 
process(current_state)
begin
case current_state is
when Zero=&gt; count_enable&lt;='0';
		count_mode&lt;='0';
		ssd_min&lt;='0';
		ssd_sec&lt;='0';
		led_alarm&lt;='0';
when Crescator=&gt; count_mode&lt;='1';
                 count_enable&lt;='1';
when afisare_min=&gt; ssd_min&lt;='1';
				ssd_sec&lt;='0';
when afisare_sec=&gt;ssd_sec&lt;='1';
				ssd_min&lt;='0';
when afisare_min_sec=&gt;ssd_sec&lt;='1';
				ssd_min&lt;='1';
when Descrescator=&gt; count_mode&lt;='0';
 				count_enable&lt;='1';
 				ssd_min&lt;='0';
 				ssd_sec&lt;='0';
when Alarma=&gt;led_alarm&lt;='1';
			count_enable&lt;='0';
			ssd_sec&lt;='0';--0
			ssd_min&lt;='0';
when others=&gt;
end case;
end process;
           
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="verif_alarma">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY verif_alarma IS
  PORT (
  ------------------------------------------------------------------------------
  --Insert input ports below
                      -- input bit example
   sec:in std_logic_vector(5 downto 0);
   min:in std_logic_vector(6 downto 0);
   set_alarm: out std_logic
    );
END verif_alarma;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF verif_alarma IS

signal min_sec: std_logic_vector(12 downto 0);

BEGIN
min_sec&lt;=min &amp; sec;
set_alarm&lt;=not(min_sec(12) or min_sec(11) or min_sec(10) or min_sec(9) or min_sec(8) or min_sec(7) or min_sec(6) or min_sec(5) or min_sec(4) or min_sec(3) or min_sec(2) or min_sec(1) or min_sec(0));
END TypeArchitecture;</vhdl>
</project>
